import re
import random
import webbrowser
from urllib.parse import quote
from datetime import datetime
import time
import requests
from dotenv import load_dotenv
import os
from textblob import TextBlob
from translate import Translator
import spacy


def weather():
    try:
        CITY = "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥,RU"
        load_dotenv() # –ó–∞–≥—Ä—É–∑–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ env
        API_KEY = os.getenv("OPEN_WEATHER_KEY") # –í—ã–±—Ä–∞–ª–∏ –∫–ª—é—á–∏–∫

        url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric&lang=ru" # –°—Å—ã–ª–æ—á–∫–∞ –Ω–∞ —Å–∞–π—Ç–∏–∫ :3

        if API_KEY is None:
            raise ValueError("–ê–ü–ò –ò–ù–û–ì–î–ê –ö–û–ö–ï–¢–ù–ò–ß–ê–ï–¢ –°–û –ú–ù–û–ô –ü–û-–†–£–°–°–ö–ò. üîëüîëüîëüîëüîë")

        if requests.get(url).status_code != 200:
            raise ValueError("–≠–≠–≠–≠–≠–≠–≠ –ö–£–î–ê –ü–†–ï–©–¨?? –ù–ï –í–ò–î–ò–®–¨ –ö–û–î –ù–ï 200??? üíîüíîüíî")

        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        response = requests.get(url) # –ó–∞–ø—Ä–æ—Å
        data = response.json() # –ö—É—à–∞–µ–º

        # ---------------–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ----------------
        city = data["name"]
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data["main"]["humidity"]
        weather_desc = data["weather"][0]["description"]
        wind_speed = data["wind"]["speed"]
        # ----------------------------------------------

        time.sleep(2) # –°–ø–∞—Ç—å... –ò —Ä–µ–∂–∏–º. –ò –º–µ–Ω—è –Ω–µ –≤–æ–ª–Ω—É–µ—Ç —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–ª –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è. –Ø —Å–ø–ª—é.

        # ---------------–í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ--------
        return (f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: \n"
                     f"- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C) \n"
                     f"- –û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc.capitalize()} \n"
                     f"- –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n"
                     f"- –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å")
        # ----------------------------------------------

    except Exception as e:
        return str(e)


def get_weather(CITY_en):
    try:
        #print(CITY_en)
        if CITY_en is None:
            CITY = "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥,RU"
            print("–ë–æ—Ç: –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ... –î–µ—Ä–∂–∏ –≤–æ—Ç –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥.")
        else: CITY = CITY_en+",RU"
        #print(CITY)
        load_dotenv() # –ó–∞–≥—Ä—É–∑–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ env
        API_KEY = os.getenv("OPEN_WEATHER_KEY") # –í—ã–±—Ä–∞–ª–∏ –∫–ª—é—á–∏–∫

        url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric&lang=ru" # –°—Å—ã–ª–æ—á–∫–∞ –Ω–∞ —Å–∞–π—Ç–∏–∫ :3

        if API_KEY is None:
            raise ValueError("–ê–ü–ò –ò–ù–û–ì–î–ê –ö–û–ö–ï–¢–ù–ò–ß–ê–ï–¢ –°–û –ú–ù–û–ô –ü–û-–†–£–°–°–ö–ò. üîëüîëüîëüîëüîë")

        if requests.get(url).status_code != 200:
            raise ValueError("–≠–≠–≠–≠–≠–≠–≠ –ö–£–î–ê –ü–†–ï–©–¨?? –ù–ï –í–ò–î–ò–®–¨ –ö–û–î –ù–ï 200??? üíîüíîüíî")

        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        response = requests.get(url) # –ó–∞–ø—Ä–æ—Å
        data = response.json() # –ö—É—à–∞–µ–º

        # ---------------–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ----------------
        city = data["name"]
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data["main"]["humidity"]
        weather_desc = data["weather"][0]["description"]
        wind_speed = data["wind"]["speed"]
        # ----------------------------------------------

        time.sleep(2) # –°–ø–∞—Ç—å... –ò —Ä–µ–∂–∏–º. –ò –º–µ–Ω—è –Ω–µ –≤–æ–ª–Ω—É–µ—Ç —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–ª –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è. –Ø —Å–ø–ª—é.

        # ---------------–í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ--------
        return (f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: \n"
                     f"- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C) \n"
                     f"- –û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc.capitalize()} \n"
                     f"- –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n"
                     f"- –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å")
        # ----------------------------------------------

    except Exception as e:
        return str(e)

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
def translate_to_english(text):

    translator = Translator(to_lang="en", from_lang="ru")

    try:
        return translator.translate(text).lower()
    except:
        return text


# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
def analyze_sentiment(text):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        for char in text:
            if (65 <= ord(char) <= 90) or (97 <= ord(char) <= 122):
                return 0.0, "error"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏

        text = translate_to_english(text)
        analysis = TextBlob(text)
        polarity = analysis.sentiment.polarity

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        if polarity > 0.1:
            sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
        elif polarity < -0.1:
            sentiment = "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
        else:
            sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"

        return polarity, sentiment

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
        return 0.0, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
def get_sentiment_response(polarity, sentiment):
    responses = {
        "error": [
            "–ü–æ —Ä—É—Å—Å–∫–∏ –ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
        ],
        "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π": [
            "–Ø —á—É–≤—Å—Ç–≤—É—é –ø–æ–∑–∏—Ç–∏–≤! –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {:.2f}",
            "–ö–∞–∫–æ–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π! –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {:.2f}",
            "–í–∞—à —ç–Ω—Ç—É–∑–∏–∞–∑–º –∑–∞—Ä–∞–∑–∏—Ç–µ–ª–µ–Ω! –û—Ü–µ–Ω–∫–∞: {:.2f}"
        ],
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π": [
            "–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ –≤–∞–º –ø–ª–æ—Ö–æ... –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {:.2f}",
            "–ü–æ—Ö–æ–∂–µ, –≤–∞–º –≥—Ä—É—Å—Ç–Ω–æ. –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {:.2f}",
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {:.2f}"
        ],
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π": [
            "–ü–æ–Ω—è—Ç–Ω–æ. –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {:.2f}",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {:.2f}",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ü–µ–Ω–∫–∞: {:.2f}"
        ]
    }
    return random.choice(responses[sentiment]).format(polarity)

#---------------------–í—Ä–ï–º–Ø-------------------
def timer():
    return datetime.now().strftime("%H:%M:%S")
#-----------------------------------------------

#--------------------–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤--------------------------
responses = {
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    r"(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|—Ö–∞–π|–∑–¥–∞—Ä–æ–≤)": [
        "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–•–∞–π! –ö–∞–∫ —Å–∞–º?",
        "–û, –ø—Ä–∏–≤–µ—Ç! –ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å?"
    ],

    # –ö–∞–∫ –¥–µ–ª–∞
    r"(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ —Å–∞–º)": [
        "–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?",
        "–ö–∞–∫ –≤ —Å–∫–∞–∑–∫–µ! –¢–æ–ª—å–∫–æ –≤–æ—Ç –¥—Ä–∞–∫–æ–Ω–∞ –Ω–µ—Ç...",
        "–õ—É—á—à–µ –≤—Å–µ—Ö! –ù—É –ø–æ—á—Ç–∏ :)",
        "–†–∞–±–æ—Ç–∞—é, –Ω–µ –ø–æ–∫–ª–∞–¥–∞—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞!",
        "–ö–∞–∫ —É –±–æ—Ç–∞ - –±–µ–∑ —ç–º–æ—Ü–∏–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ!"
    ],

    # –ò–º—è
    r"(–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç|—Ç–≤–æ–µ –∏–º—è|–∫—Ç–æ —Ç—ã)": [
        "–Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å –º–Ω–µ –∏–º—è!",
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç–∏–∫ 3000!",
        "–Ø –±–µ–∑—ã–º—è–Ω–Ω—ã–π –¥—É—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ :)",
        "–ú–æ–∂–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç!",
        "–Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –±–µ–∑ –∏–º–µ–Ω–∏"
    ],

    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    r"(—á—Ç–æ —É–º–µ–µ—à—å|—Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏|—á—Ç–æ –º–æ–∂–µ—à—å)": [
        "–Ø –º–æ–≥—É –±–æ–ª—Ç–∞—Ç—å, –∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –≤—Ä–µ–º—è!",
        "–£–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–µ–º–Ω–æ–≥–æ —à—É—Ç–∏—Ç—å!",
        "–ú–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã: 1) –ì–æ–≤–æ—Ä–∏—Ç—å 2) –ò—Å–∫–∞—Ç—å 3) –ü–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è",
        "–Ø –∫–∞–∫ Google, —Ç–æ–ª—å–∫–æ –ø–æ–º–µ–Ω—å—à–µ –∏ –ø–æ—Å–º–µ—à–Ω–µ–µ!",
        "–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –∏–ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ —Å–µ—Ç–∏"
    ],

    r"(–ø–æ–º–æ—â—å|—Å–ø—Ä–∞–≤–∫–∞|—Ñ—É–Ω–∫—Ü–∏–∏|—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å|–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)": [
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "1. –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã\n"
        "2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        "3. –°–æ–æ–±—â–∏—Ç—å –ø–æ–≥–æ–¥—É\n"
        "4. –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (—Ñ–æ—Ä–º–∞—Ç: –ø–æ–∏—Å–∫ \"–∑–∞–ø—Ä–æ—Å\")\n"
        "5. –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é\n"
    ],

    # –í—Ä–µ–º—è
    r"(–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è|–≤—Ä–µ–º—è)": [
        lambda: f"–°–µ–π—á–∞—Å —Ç–æ—á–Ω–æ {timer()}!",
        lambda: f"–ú–æ–∏ —á–∞—Å—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç {timer()}",
        lambda: f"–í—Ä–µ–º—è - {timer()}. –ù–µ –æ–ø–æ–∑–¥–∞–π!",
        lambda: f"–¢–∏–∫-—Ç–∞–∫, —Å–µ–π—á–∞—Å {timer()}",
        lambda: f"–ü–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ —á–∞—Å—ã: {timer()}"
    ],

    # –ü–æ–≥–æ–¥–∞
    r"(–ø–æ–≥–æ–¥–∞|–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞|–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã)": [
        lambda: f"–î–µ—Ä–∂–∏ –ø—Ä–æ–≥–Ω–æ–∑ ‚¨ÜÔ∏è: {weather()}",
        lambda: f"–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ ‚¨ÜÔ∏è: {weather()}",
        lambda: f"–ì–ª—è–Ω—É–ª –∑–∞ –æ–∫–Ω–æ ‚¨ÜÔ∏è: {weather()}",
        lambda: f"–ú–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ ‚¨ÜÔ∏è: {weather()}",
        lambda: f"–ü–æ–≥–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç ‚¨ÜÔ∏è: {weather()}"
    ],

    # –ú—É–∑—ã–∫–∞
    r"(–º—É–∑—ã–∫–∞|–ø–µ—Å–Ω—è|–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É|–ø–æ—Å–æ–≤–µ—Ç—É–π –ø–µ—Å–Ω—é)": [
        lambda: f"–õ–æ–≤–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é: {music()}",
        lambda: f"–°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫: {music()}",
        lambda: f"–°–µ–≥–æ–¥–Ω—è –≤ —Ç–≤–æ–µ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ: {music()}",
        lambda: f"–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç: {music()}",
        lambda: f"–î–µ—Ä–∂–∏ –ø–µ—Å–Ω—é: {music()}"
    ],

    # –ü–æ–∏—Å–∫
    r'(–ø–æ–∏—Å–∫ ".*")': [
        lambda x: web_search(x),
    ],

    # –ü–æ–¥—Å—á–µ—Ç
    r'(–ø–æ—Å—á–∏—Ç–∞–π ".*")': [
        lambda x: calculate_expression(x),
    ],

    # –ü—Ä–æ—â–∞–Ω–∏–µ
    r"(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–≤—ã—Ö–æ–¥|–∑–∞–∫–æ–Ω—á–∏—Ç—å)": [
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è!",
        "–ü–æ–∫–∞-–ø–æ–∫–∞! –ë—É–¥—É —Å–∫—É—á–∞—Ç—å!",
        "–£–∂–µ —É—Ö–æ–¥–∏—à—å? –ù—É –ª–∞–¥–Ω–æ...",
        "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!",
        "–ü—Ä–æ—â–∞–π, —Å–º–µ—Ä—Ç–Ω—ã–π! (—à—É—Ç–∫–∞)"
    ],

    # –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
    r"(—Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π|–º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è|—Ç—ã —Ö–æ—Ä–æ—à–∏–π)": [
        "–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–æ–∂–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π!",
        "–û–π, —è –∫—Ä–∞—Å–Ω–µ—é (–µ—Å–ª–∏ –±—ã –º–æ–≥)!",
        "–≠—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è —Ö–æ—Ä–æ—à–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!",
        "–°–ø–∞—Å–∏–±–æ! –Ø —Å—Ç–∞—Ä–∞—é—Å—å!",
        "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ!"
    ],
}
#----------------------------------------------------------------------------------

def music():
    array = [
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –¢–∞–º —Ä–µ–≤–µ–ª–∏ –≥–æ—Ä—ã - –ê–≤—Ç–æ—Ä: Miyagi & Andy Panda",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: SPACE!(Super Slowed) - –ê–≤—Ç–æ—Ä: NAOMI, DRAWNEDEATH",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: Favorite - –ê–≤—Ç–æ—Ä: Isabel Larosa",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: Minor - –ê–≤—Ç–æ—Ä: Miyagi & Andy Panda",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –†–∞–ü–∞–ü–∞–º - –ê–≤—Ç–æ—Ä: Miyagi & Andy Panda",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: In Love - –ê–≤—Ç–æ—Ä: Miyagi & Andy Panda",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: I Got Love - –ê–≤—Ç–æ—Ä: Miyagi & Andy Panda",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –º—É—Å–∏-–ø—É—Å–∏ hardstyle remix - –ê–≤—Ç–æ—Ä: yayaheart",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π —Ä–∞–∑ - –ê–≤—Ç–æ—Ä: –ú–æ–Ω–µ—Ç–æ—á–∫–∞",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –ó–µ–º–ª—è - –ê–≤—Ç–æ—Ä: –ú–∞—à–∞ –∏ –ú–µ–¥–≤–µ–¥–∏",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–æ–∫–ª—è—Ç—ã–π —Å—Ç–∞—Ä—ã–π –¥–æ–º - –ê–≤—Ç–æ—Ä: –ö–æ—Ä–æ–ª—å –∏ –®—É—Ç",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –í—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É - –ê–≤—Ç–æ—Ä: –ï–≥–æ—Ä –õ–µ—Ç–æ–≤",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—ã–ª–æ–π –ª—é–±–≤–∏ - –ê–≤—Ç–æ—Ä: –ö–æ—Ä–æ–ª—å –∏ –®—É—Ç",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü–æ–ø—Ä–æ—à—É —É —Ç–µ–±—è - –ê–≤—Ç–æ—Ä: –í–∏—Ä—É—Å",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: Soldat - –ê–≤—Ç–æ—Ä: STURMMANN",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –ì–æ—Ä–æ–¥ —Å–æ—á–∏ - –°–µ—Ä–≥–µ–π –¢—Ä–æ—Ñ–∏–º–æ–≤",
        "–ù–∞–∑–≤–∞–Ω–∏–µ: Fairy Tale - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –†—ã–±–∞–∫",
    ]
    return array[random.randint(0, len(array) - 1)]

LOG_FILE = "chat_log.txt"

def log_message(user_input, bot_response, error=None):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç—É
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_entry = f"[{timestamp}] –ó–∞–ø—Ä–æ—Å: \"{user_input}\" | –û—Ç–≤–µ—Ç: \"{bot_response}\""
        if error:
            log_entry += f" | –û—à–∏–±–∫–∞: \"{error}\""
        log_entry += "\n"
        log_file.write(log_entry)


# webbrowser –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫, quote –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ–≥–æ url

def web_search(command):
    # –ü–æ–∏—Å–∫ –≤ –∏–Ω–µ—Ç–µ.
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å "–ø–æ–∏—Å–∫ " –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–≤—ã—á–∫–∏
        if command.lower().startswith('–ø–æ–∏—Å–∫ "') and command.count('"') >= 2:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
            query = command.split('"')[1]

            forbidden = forbidden_func() # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–µ—á–∫–∏
            string_forbidden = "" # –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

            # –ú–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            if len(query.split()) > 1:
                for resp in query.split():
                    if resp in forbidden:
                        string_forbidden += resp + " "

            elif query in forbidden:
                raise ValueError(f"–¢—ã —á–µ... –Ø –±—ã–ª –æ —Ç–µ–±–µ –ª—É—á—à–µ–≥–æ –º–Ω–µ–Ω–∏—è, —á–µ–ª... \n–ö–∞–∫–∏–µ {query}? –¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ?!")

            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É
            if string_forbidden != "": raise ValueError(f"–¢—ã —á–µ... –Ø –±—ã–ª –æ —Ç–µ–±–µ –ª—É—á—à–µ–≥–æ –º–Ω–µ–Ω–∏—è, —á–µ–ª... \n–ö–∞–∫–∏–µ {string_forbidden}? –¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ?!")

            webbrowser.open(f"https://www.google.com/search?q={quote(query)}")
            return f"–û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è: {query}"

        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–æ–∏—Å–∫ \"–∑–∞–ø—Ä–æ—Å\""
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

def forbidden_func():
    try:
        with open("forbidden_file.txt", "r", encoding="utf8") as fin:
            mass = [] # –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
            f = fin.readlines()
            for line in f:
                if "\n" in line: mass.append(line.replace("\n", ""))
                else: mass.append(line)
            return mass

    except FileNotFoundError:
        print("–§–∞–π–ª –≥–¥–µ, –±—Ä–æ?")

    except Exception:
        print("–í—Å–µ... –Ø —É—Å—Ç–∞–ª. –Ø —É—Ö–æ–∂—É.")

def calculate_expression(expression):
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
        expr = expression.replace(" ", "").replace("–ø–æ—Å—á–∏—Ç–∞–π", "")[1:-1]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)
        if not re.match(r'^[\d+\-*/.()]+$', expr):
            return "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏"

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = eval(expr)
        return "–ë–æ—Ç: –í–∞—à –æ—Ç–≤–µ—Ç —ç—Ç–æ - "+str(result)

    except ZeroDivisionError:
        return "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å spaCy –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
nlp = spacy.load("ru_core_news_sm")

# –°–ø–∏—Å–æ–∫ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
INSULTS = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–∏—Ü–∞", "–∫—Ä–µ—Ç–∏–Ω", "–¥–µ–±–∏–ª"]


# --------------------------–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è---------------------------------
def contains_insult(text):
    doc = nlp(text.lower())
    for token in doc:
        if token.text in INSULTS:
            return True
    return False


# --------------------------–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞---------------------------------
def detect_topic(text):
    doc = nlp(text)
    topics = []

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ (–≥–æ—Ä–æ–¥–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.)
    for ent in doc.ents:
        if ent.label_ in ["LOC", "GPE"]:  # –õ–æ–∫–∞—Ü–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞
            topics.append(f"–≥–æ—Ä–æ–¥: {ent.text}")
        elif ent.label_ == "ORG":
            topics.append(f"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {ent.text}")

    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if "–ø–æ–≥–æ–¥" in text.lower():
        topics.append("—Ç–µ–º–∞: –ø–æ–≥–æ–¥–∞")
    if "–ø—Ä–∏–≤–µ—Ç" in text.lower():
        topics.append("—Ç–µ–º–∞: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")

    return ", ".join(topics) if topics else "—Ç–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"


# --------------------------–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤---------------------------------
def chatbot_response(text):
    text = text.lower().strip()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–º—ã
    topic = detect_topic(text)
    log_message(f"{text} [–¢–µ–º–∞: {topic}]", "–ê–Ω–∞–ª–∏–∑")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
    if contains_insult(text):
        return random.choice([
            "–î–∞–≤–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤–µ–∂–ª–∏–≤–æ!",
            "–Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≥—Ä—É–±–æ—Å—Ç–∏.",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ."
        ])

    # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
    doc = nlp(text)
    for ent in doc.ents:
        if ent.label_ in ["LOC", "GPE"]:  # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            return get_weather(ent.text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    for pattern, responses_list in responses.items():
        if re.search(pattern, text):
            response = random.choice(responses_list)
            if callable(response):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é
                if pattern in [r'(–ø–æ–∏—Å–∫ ".*")', r'(–ø–æ—Å—á–∏—Ç–∞–π ".*")']:
                    return response(text)
                else:
                    return response()
            return response

    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    polarity, sentiment = analyze_sentiment(text)
    return get_sentiment_response(polarity, sentiment)


# ----------------------------------------------------------------------------

if __name__ == "__main__":
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")
    while True:
        user_input = input("–í—ã: ").strip()
        if user_input.lower() in ["–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]:
            log_message(user_input, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞")
            print("–ë–æ—Ç:", random.choice([
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                "–ü–æ–∫–∞-–ø–æ–∫–∞!",
                "–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!",
                "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!",
                "–£–¥–∞—á–∏ —Ç–µ–±–µ!"
            ]))
            break

        bot_response = chatbot_response(user_input)
        print("–ë–æ—Ç:", bot_response)
        log_message(user_input, bot_response)